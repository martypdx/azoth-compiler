{"version":3,"file":"tests-bundle.js","sources":["../src/binders/binding-types.js","../src/binders/binder.js","../src/binders/child-binder.js","../src/binders/attribute-binder.js","../src/binders/targets.js","../src/binders/binder-factory.js","../tests/binders/binder-factory.test.js","../tests/binders/binder.test.js","../tests/binders/targets.test.js","../src/ast.js","../tests/helpers/code-equal.js","../src/compilers/globals.js","../src/parse/sigil.js","../src/parse/void-elements.js","../src/parse/parse-template.js","../src/transformers/common.js","../src/transformers/identifiers.js","../src/transformers/fragment.js","../src/transformers/binding.js","../src/transformers/template.js","../src/compilers/compile.js","../tests/compilers/compile.test.js","../tests/compilers/globals.test.js","../src/parse/find-import.js","../src/parse/find-templates.js","../src/parse/params.js","../src/parse/match-observables.js","../src/parse/parse.js","../src/compilers/template.js","../src/compilers/module.js","../tests/compilers/module.test.js","../tests/compilers/scope.test.js","../tests/helpers/to-code.js","../tests/compilers/template.test.js","../tests/parse/find-import.test.js","../tests/parse/find-templates.test.js","../tests/parse/match-observables.test.js","../tests/parse/params.test.js","../tests/parse/parse-template.test.js","../tests/parse/parse.test.js","../tests/parse/sigils.test.js","../tests/parseTaggedTemplate.test.js","../tests/research/htmlparser2.test.js","../tests/research/magic-string.test.js","../tests/research/walkers.test.js","../tests/transformers/getBinder.js","../tests/transformers/binding.test.js","../tests/transformers/fragment.test.js","../tests/transformers/template.test.js"],"sourcesContent":["export const VALUE = Symbol('value');\nexport const MAP = Symbol('map');\nexport const SUBSCRIBE = Symbol('subscribe');","import { generate } from 'astring';\nimport { VALUE, /*MAP,*/ SUBSCRIBE } from './binding-types';\n\n\nexport default class Binder {\n\n    constructor({ type = VALUE, ast = null } = {}, target) {        \n        this.type = type;\n        this.params = null;\n        this.ast = ast;\n        this.elIndex = -1;\n        this.templates = null;\n        \n        this.moduleIndex = -1;\n        this.target = target;\n\n        this.index = -1;\n        this.name = '';        \n    }\n\n    init(el, attr) {\n        this.index = el.childIndex;\n        this.name = attr;\n    }\n\n    writeHtml() {\n        return this.target.html;\n    }\n\n    writeInit() {\n        return this.target.init(this);\n    }\n\n    writeImport() {\n        return this.target.import;\n    }\n\n    get isSubscriber() {\n        const { type, params } = this;\n        return (type === SUBSCRIBE || (!!params && params.length > 0));\n    }\n\n    writeBinding(observer) { \n        const { ast, params, type } = this;\n        const isIdentifier = ast.type === 'Identifier';\n\n        const expr = isIdentifier ? ast.name : generate(ast);\n        if ((!params || !params.length) && type !== SUBSCRIBE) {\n            return `${observer}(${expr})`;\n        }\n\n        let observable = '';\n\n        if(isIdentifier) {\n            observable = expr;\n        }\n        else {\n            if (type === SUBSCRIBE) {\n                observable = `(${expr})`;\n            }\n            else {\n                observable = params.join();\n                const map = `(${observable}) => (${expr})`;\n\n                if (params.length > 1) {\n                    observable = `combineLatest(${observable}, ${map})`;\n                }\n                else {\n                    observable += `.map(${map})`;\n                }\n            }\n        }\n\n        if(type === VALUE) observable += `.first()`;\n\n        return this.addSubscribe(observable, observer);\n    }\n\n    addSubscribe(observable, observer) {\n        return `${observable}.subscribe(${observer})`;\n    }\n\n    // [sub templates]\n\n    // unsubscribe?\n}","import Binder from './binder';\n\nexport default class ChildNodeBinder extends Binder {\n\n    constructor(options, target) { \n        super(options, target);\n        this.index = -1;\n    }\n\n    // init(el) {\n    //     this.index = el.childIndex;\n    // }\n}\n","import Binder from './binder';\n\n// const attrPattern = /\\s*?([a-zA-Z0-9\\-]+?)=$/;\n\n// const specials = {\n//     on: 'event',\n//     class: 'class'\n// };\n\nexport default class AttributeBinder extends Binder {\n    \n    constructor(options, target) {\n        super(options, target);\n        this.name = '';\n    }\n\n    // init(el, attr) {\n    //     // if (parts.length > 1 && (type = specials[parts[0]])) {\n    //     //     delete currentEl.attributes[name];\n    //     // }\n    //     this.name = attr;\n    // }\n}\n","\nconst childNode = (name, html) => ({\n    import: name,\n    html,\n    init(binder) {\n        return binder.index;\n    }\n});\n\nexport const text = childNode('__textBinder', '<text-node></text-node>');\nexport const block = childNode('__blockBinder', '<block-node></block-node>');\nexport const attribute = {\n    import: '__attrBinder',\n    html: '\"\"',\n    init(binder) {\n        return binder.name;\n    }\n};","import ChildBinder from './child-binder';\nimport AttributeBinder from './attribute-binder';\nimport { text, block, attribute } from './targets';\n\nexport { ChildBinder, AttributeBinder };\n    \nexport default function getBinder(options) {\n\n    let Type = null, target = null;\n    \n    if (options.inAttributes) {\n        Type = AttributeBinder;\n        if (options.block) {\n            throw new Error('Attribute Blocks not yet supported');\n        }\n        target = attribute;\n    }\n    else {\n        Type = ChildBinder;\n        target = options.block ? block : text;\n    }\n\n    return new Type(options, target);\n}\n","import getBinder, { ChildBinder, AttributeBinder } from '../../src/binders/binder-factory';\nimport { text, block, attribute } from '../../src/binders/targets';\n\nimport chai from 'chai';\nconst assert = chai.assert;\n\ndescribe('binder factory', () => {\n\n    describe('binding type', () => {\n        it('passes thru', () => {\n            const binder = getBinder({ inAttributes: false, block: false, type: 'value' });\n            assert.equal(binder.type, 'value');\n        });\n    });\n\n    describe('element child', () => {\n        it('text binder', () => {\n            const binder = getBinder({ inAttributes: false, block: false });\n            assert.instanceOf(binder, ChildBinder);\n            assert.equal(binder.target, text);\n        });\n\n        it('block binder', () => {\n            const binder = getBinder({ inAttributes: false, block: true });\n            assert.instanceOf(binder, ChildBinder);\n            assert.equal(binder.target, block);\n        });\n    });  \n\n    describe('element attribute', () => {\n        it('attribute binder', () => {\n            const binder = getBinder({ inAttributes: true, block: false });\n            assert.instanceOf(binder, AttributeBinder);\n            assert.equal(binder.target, attribute);\n        });\n\n        it('attribute block binder not yet supported', () => {\n            assert.throws(() => getBinder({ inAttributes: true, block: true }), /not yet supported/);\n        });\n    });\n\n});","/*eslint no-undef: off */\nimport Binder from '../../src/binders/binder';\nimport ChildBinder from '../../src/binders/child-binder';\nimport AttributeBinder from '../../src/binders/attribute-binder';\nimport { /*VALUE,*/ MAP, SUBSCRIBE } from '../../src/binders/binding-types';\n\nimport chai from 'chai';\nconst assert = chai.assert;\n\ndescribe('Binder', () => {\n\n    it('elIndex and moduleIndex default to -1', () => {\n        assert.equal(new Binder().elIndex, -1);\n        assert.equal(new Binder().moduleIndex, -1);\n    });\n\n    it('isSubscriber', () => {\n        assert.isFalse(new Binder({ type: 'value' }).isSubscriber);\n        assert.isFalse(new Binder({ type: 'observer' }).isSubscriber);\n        assert.isFalse(new Binder({ type: 'observable' }).isSubscriber);\n    });\n\n    describe('target', () => {\n\n        it('ChildBinder init', () => {\n            const childBinder = new ChildBinder({});\n            childBinder.init({ childIndex: 2 });\n            assert.equal(childBinder.index, 2);\n        });\n\n        it('AttributeBinder init', () => {\n            const attrBinder = new AttributeBinder({});\n            attrBinder.init({}, 'name');\n            assert.equal(attrBinder.name, 'name');\n        });\n\n        it('writes', () => {\n            const writer = {\n                html: 'html',\n                import: '__import',\n                init: binder => binder.foo\n            };\n\n            const binder = new Binder({}, writer);\n            binder.foo = 'FOO';\n            \n            assert.equal(binder.writeHtml(), writer.html);\n            assert.deepEqual(binder.writeImport(), writer.import);\n            assert.equal(binder.writeInit(), 'FOO');\n        });\n    });\n    \n    describe.skip('binding', () => {\n\n        const OBSERVER = '<observer>';\n\n        // TODO: .distinctUntilChanged()\n        \n        it('value identifier', () => {\n            const source = () => foo;\n            const binder = new Binder({ ast: source.toExpr() });\n            binder.params = ['foo'];\n\n            const binding = binder.writeBinding(OBSERVER);\n            const expected = `foo.first().subscribe(${OBSERVER})`;\n            \n            assert.equal(binding, expected);\n        });\n\n        it('value expression with single param', () => {\n            const source = () => foo + bar;\n            const binder = new Binder({ ast: source.toExpr() });\n            binder.params = ['foo'];\n\n            const binding = binder.writeBinding(OBSERVER);\n            const expected = `foo.map((foo) => (foo + bar)).first().subscribe(${OBSERVER})`;\n            \n            assert.equal(binding, expected);\n        });\n\n        it('value expression with multiple params', () => {\n            const source = () => foo + bar;\n            const binder = new Binder({ ast: source.toExpr() });\n            binder.params = ['foo', 'bar'];\n\n            const binding = binder.writeBinding(OBSERVER);\n            const expected = `combineLatest(foo,bar, (foo,bar) => (foo + bar)).first().subscribe(${OBSERVER})`;\n            \n            assert.equal(binding, expected);\n        });\n\n        it('map identifier', () => {\n            const source = () => foo;\n            const binder = new Binder({ ast: source.toExpr(), type: MAP });\n            binder.params = ['foo'];\n\n            const binding = binder.writeBinding(OBSERVER);\n            const expected = `foo.subscribe(${OBSERVER})`;\n            \n            assert.equal(binding, expected);\n        });\n\n        it('subscribe identifier', () => {\n            const source = () => foo.map(foo => foo + 1);\n            const binder = new Binder({ ast: source.toExpr(), type: SUBSCRIBE });\n            binder.params = ['foo'];\n\n            const binding = binder.writeBinding(OBSERVER);\n            const expected = `(foo.map(foo => foo + 1)).subscribe(${OBSERVER})`;\n            \n            assert.equal(binding, expected);\n        });\n\n        it('no params', () => {\n            const source = () => 1 + 2;\n            const binder = new Binder({ ast: source.toExpr() });\n            binder.params = [];\n            \n            const binding = binder.writeBinding(OBSERVER);\n            const expected = `${OBSERVER}(1 + 2)`;\n            \n            assert.equal(binding, expected);\n        });\n\n        it('static expression, no params', () => {\n            const source = () => x  + y;\n            const binder = new Binder({ ast: source.toExpr() });\n            binder.params = [];\n            \n            const binding = binder.writeBinding(OBSERVER);\n            const expected = `${OBSERVER}(x + y)`;\n            \n            assert.equal(binding, expected);\n        });\n    });\n});\n","import { text, block, attribute } from '../../src/binders/targets';\n\nimport chai from 'chai';\nconst assert = chai.assert;\n\ndescribe('binder targets', () => {\n\n    it('text', () => {\n        assert.equal(text.html, '<text-node></text-node>');\n        assert.equal(text.import, '__textBinder');\n        assert.equal(text.init({ index: 2 }), 2);\n    });\n\n    it('block', () => {\n        assert.equal(block.html, '<block-node></block-node>');\n        assert.equal(block.import, '__blockBinder');\n        assert.equal(block.init({ index: 2 }), 2);\n    });\n\n    it('attribute', () => {\n        assert.equal(attribute.html, '\"\"');\n        assert.equal(attribute.import, '__attrBinder');\n        assert.equal(attribute.init({ name: 'name' }), 'name');\n    });\n});\n","import { parse } from 'acorn';\n\nconst DEFAULTS = {\n    ecmaVersion: 8,\n    sourceType: 'module'\n};\n\nexport default function ast(source, options) {\n    return parse(source, Object.assign({}, DEFAULTS, options));\n}\n","import parse from '../../src/ast';\nimport { generate } from 'astring';\nimport chai from 'chai';\nconst assert = chai.assert;\n\nconst stripParse = code => {\n    const ast = parse(code);\n    return generate(ast, { indent: '    ' });\n};\n\nconst tryParse = (name, code) => {\n    try {\n        return stripParse(code);\n    }\n    catch (err) {\n        console.log('FAILED PARSE:', name, '\\nERROR:', err, '\\nCODE:\\n', code);\n        throw err;\n    }\n};\n\nexport default function codeEqual(actual, expected) {\n    if(typeof expected !== 'string') expected = expected.toCode();\n    const parsedActual = tryParse('actual', actual);\n    const parsedExpected = tryParse('expected', expected);\n    assert.equal(parsedActual, parsedExpected);\n}\n","\nexport class UniqueStrings {\n    constructor() {\n        this.map = new Map();\n    }\n\n    add(string, value = {}) {\n        const { map } = this;\n        if(map.has(string)) return map.get(string).index;\n        const index = value.index = map.size;\n        map.set(string, value);\n        return index;\n    }\n\n    set(string, value) {\n        this.map.set(string, value);\n    }\n\n    get all() {\n        return [...this.map.keys()];\n    }\n\n    get values() {\n        return [...this.map.values()];\n    }\n}\n\nconst TAG = '_';\n\nexport class Globals {\n    constructor() {\n        this._imports = new UniqueStrings();\n        this._binders = new UniqueStrings();\n        this._fragments = new UniqueStrings();\n        this.tag = TAG;\n        this.specifiers = null;\n    }\n\n    get imports() { return this._imports.all; }\n    get binders() { return this._binders.values; }\n    get fragments() { return this._fragments.all; }\n\n    addFragment(html) {\n        return this._fragments.add(html);\n    }\n\n    addBinder(binder) {\n        const name = binder.writeImport();\n        const arg = binder.writeInit();\n        const value = { name, arg };\n        const unique = JSON.stringify(value);\n        \n        this._imports.add(name);\n        return this._binders.add(unique, value);\n    }\n}","import { VALUE, MAP, SUBSCRIBE } from '../binders/binding-types';\n\nconst types = {\n    '*': MAP,\n    '@': SUBSCRIBE\n};\n\nconst escapedBindingMatch = /\\\\[*@]$/;\nconst bindingMatch = /[\\*@]$/;\n\nexport function getBindingType(text) {\n\n    const tryEscaped = () => {\n        let escaped = false;\n        text = text.replace(escapedBindingMatch, m => {\n            escaped = true;\n            return m[m.length - 1];\n        });\n        return escaped;\n    };\n\n    let type = VALUE;\n\n    if(tryEscaped()) return { type, text };\n\n    text = text.replace(bindingMatch, m => {\n        type = types[m];\n        return '';\n    });\n\n    return { type, text };\n}\n\nconst escapedBlockMatch = /^\\\\#/;\nconst blockMatch = /^#/;\n\nexport function getBlock(text) {\n\n    const tryEscaped = () => {\n        let escaped = false;\n        text = text.replace(escapedBlockMatch, m => {\n            escaped = true;\n            return m[m.length - 1];\n        });\n        return escaped;\n    };\n\n    let block = false;\n\n    if(tryEscaped()) {\n        return {\n            block, \n            text\n        };\n    }\n\n    text = text.replace(blockMatch, () => {\n        block = true;\n        return '';\n    });\n\n    return { block, text };\n}\n","export default {\n    __proto__: null,\n    area: true,\n    base: true,\n    basefont: true,\n    br: true,\n    col: true,\n    command: true,\n    embed: true,\n    frame: true,\n    hr: true,\n    img: true,\n    input: true,\n    isindex: true,\n    keygen: true,\n    link: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true\n};\n","import htmlparser from 'htmlparser2';\nimport { getBindingType, getBlock } from './sigil'; \nimport getBinder from '../binders/binder-factory';\nimport voidElements from './void-elements';\n\nconst getEl = (name = 'root') => ({\n    name, \n    attributes: {}, \n    binders: [],\n    childBinders: [],\n    childIndex: -1\n});\n\nexport default function parseTemplate({ expressions, quasis }) {\n\n    const fragment = getEl();\n    const html = [];\n    const stack = [];\n    let currentEl = fragment;\n    let inAttributes = false;\n    let currentAttr = null;\n\n    let allBinders = null;\n    \n    const handler = {\n        onopentagname(name) {\n            currentEl.childIndex++;\n            stack.push(currentEl);\n            currentEl = getEl(name);\n            inAttributes = true;\n        },\n        onattribute(name, value) {\n            currentEl.attributes[currentAttr = name] = value;\n        },\n        onopentag(name) {\n            const el = currentEl;\n            const { attributes } = el;\n            // TODO: Switch to Object.values, but needs node.js version 7.x - wait for 8.x?\n            const attrsText = Object.keys(attributes)\n                .reduce((text, key) => {\n                    // NOTE: currently not distinguishing between empty string and valueless attribute.\n                    // htmlparser2 does not distinguish and html spec says empty string \n                    // and boolean are equivalent\n                    const value = attributes[key];\n                    return `${text} ${key}=\"${value}\"`;\n                },'');\n\n            el.htmlIndex = -2 + html.push(\n                `<${name}${attrsText}`,\n                '',\n                `>`\n            );\n\n            currentAttr = null;\n            inAttributes = false;\n        },\n        ontext(text) {\n            html.push(text);\n            if(currentEl) currentEl.childIndex++;\n        },\n        add(binder) { \n            const el = currentEl;\n            binder.init(el, currentAttr || '');\n            el.binders.push(binder);\n        },\n        onclosetag(name) {\n            if(!voidElements[name]) html.push(`</${name}>`);\n            const el = currentEl;\n            currentEl = stack.pop();\n\n            if(el.binders.length > 0) {\n                html[el.htmlIndex] = ` data-bind`;\n                currentEl.childBinders.push(el.binders);\n            }\n\n            if (el.childBinders.length > 0) {\n                currentEl.childBinders.push(...el.childBinders);\n            }\n        },\n        onend() {\n            allBinders = [...fragment.childBinders, fragment.binders];\n        }\n    };\n\n    var parser = new htmlparser.Parser(handler);\n\n    quasis.forEach((quasi, i) => {\n        // quasi is one more than expression\n        if(i === expressions.length) return parser.write(quasi.value.raw);\n\n        const { type, text } = getBindingType(quasi.value.raw);\n\n        parser.write(text);\n\n        let block = false;\n        if(i < quasis.length) {\n            const value = quasis[i + 1].value;\n            const result = getBlock(value.raw);\n            value.raw = result.text;\n            block = result.block;\n        }\n        \n        const binder = getBinder({\n            block,\n            type,\n            inAttributes,\n            ast: expressions[i]\n        });\n\n        parser.write(binder.writeHtml());\n        handler.add(binder);\n    });\n\n    parser.end();\n\n    const binders = allBinders.reduce((all, binders, i) => {\n        binders.forEach(b => b.elIndex = i);\n        all.push(...binders);\n        return all;\n    }, []);\n\n    return { \n        html: html.join(''),\n        binders\n    };\n}","export function declareConst({ name, init }) {\n    return {\n        type: 'VariableDeclaration',\n        declarations: [{\n            type: 'VariableDeclarator',\n            id: identifier(name),\n            init\n        }],\n        kind: 'const'\n    };\n}\n\nexport function identifier(name) {\n    return { type: 'Identifier', name };\n}\n\nexport function memberExpression({ name, object, property, computed = false }) {\n    if(name) object = identifier(name);\n    return {\n        type: 'MemberExpression',\n        object,\n        property,\n        computed\n    };\n}\n\n// <callee>(<args>)\nexport function callExpression({ callee, name, args = [] }) {\n    if(name) callee = identifier(name);\n    return {\n        type: 'CallExpression',\n        callee,\n        arguments: args\n    };\n}\n\n// (() => {<body>}())\nexport const arrowFunctionExpression = body => ({\n    type: 'ArrowFunctionExpression',\n    id: null,\n    generator: false,\n    expression: false,\n    params: [],\n    body: {\n        type: 'BlockStatement',\n        body\n    }\n});\n\n// importMe\nexport const specifier = name => ({\n    type: 'Import Specifier',\n    imported: identifier(name),\n    local: identifier(name)\n});","export const BINDER = '__bind';\nexport const FRAGMENT = '__fragment';\nexport const NODES = '__nodes';\nexport const RENDER = '__render';\nexport const SUB = '__sub';\n\nexport const RENDERER_IMPORT = 'renderer';\nexport const MAKE_FRAGMENT_IMPORT = 'makeFragment';\n\n","import { \n    arrowFunctionExpression,\n    callExpression,\n    declareConst, \n    identifier, \n    memberExpression } from './common';\nimport { FRAGMENT, NODES, SUB } from './identifiers';\n\n// __nodes.length\nconst NODES_LENGTH = memberExpression({\n    name: NODES, \n    property: identifier('length')\n});\n\n// NOTE: because we add fragment to NodeList manually,\n// length is actually off by one. hence NOT [<NODES_LENGTH> - 1]\n// __nodes[<NODES_LENGTH>]\nconst LAST_NODE = memberExpression({\n    name: NODES, \n    property: NODES_LENGTH,\n    computed: true\n}); \n\n// const __fragment = __nodes[__nodes.length - 1];\nconst DECLARE_FRAGMENT = declareConst({\n    name: FRAGMENT, \n    init: LAST_NODE\n});  \n\n// return __fragment;\nconst RETURN_FRAGMENT = {\n    type: 'ReturnStatement',\n    argument: identifier(FRAGMENT)\n};\n\n// return __nodes[__nodes.length - 1];\nconst DIRECT_RETURN = {\n    type: 'ReturnStatement',\n    argument: LAST_NODE\n};\n\n// __sub${index}.unsubscribe();\nconst unsubscribe = index => {\n    const callee = memberExpression({\n        name: `${SUB}${index}`, \n        property: identifier('unsubscribe')\n    });\n\n    return {\n        type: 'ExpressionStatement',\n        expression: callExpression({ callee })\n    };\n};\n\nconst unsubscribes = binders => {\n    return binders\n        // map first because we need to \n        // preserve original index as subscriber \n        // index, i.e. __sub0\n        .map((binder, i) => {\n            if (!binder.isSubscriber) return;\n            return unsubscribe(i);\n        })\n        .filter(unsub => unsub);\n};\n\n\n// __fragment.unsubscribe = () => {\n//     ${unsubscribes}\n// };\nconst fragmentUnsubscribe = unsubscribes => {\n    return   {\n        type: 'ExpressionStatement',\n        expression: {\n            type: 'AssignmentExpression',\n            operator: '=',\n            left: memberExpression({\n                name: FRAGMENT,\n                property: identifier('unsubscribe')\n            }),\n            right: arrowFunctionExpression(unsubscribes)\n        }\n    };\n};\n\nexport default binders => {\n    const unsubs = unsubscribes(binders);\n    if(!unsubs.length) return [DIRECT_RETURN];\n    return [\n        DECLARE_FRAGMENT,\n        fragmentUnsubscribe(unsubs),\n        RETURN_FRAGMENT\n    ];\n};\n","import { \n    callExpression, \n    declareConst, \n    identifier, \n    memberExpression } from './common';\nimport { SUBSCRIBE, VALUE } from '../binders/binding-types';\nimport { BINDER, NODES, SUB } from './identifiers';\n\n// __bind${moduleIndex}(__nodes[${elementIndex}])\nfunction nodeBinding(moduleIndex, elementIndex) {\n    return callExpression({\n        callee: identifier(`${BINDER}${moduleIndex}`), \n        args: [memberExpression({\n            name: NODES, \n            property: {\n                type: 'Literal',\n                value: elementIndex,\n                raw: `${elementIndex}`\n            }, \n            computed: true\n        })]\n    });\n}\n\n// <nodeBinding>(<ast>);\nconst valueBinding = binder => {\n    const { ast, moduleIndex, elIndex } = binder;\n\n    return {\n        type: 'ExpressionStatement',\n        expression: callExpression({\n            callee: nodeBinding(moduleIndex, elIndex),\n            args: [ast]\n        })\n    };\n};\n\n// const __sub${binderIndex} = <ast>.subscribe(<nodeBinding>);\nconst subscribeBinding = (binder, binderIndex) => {\n    const { ast, moduleIndex, elIndex } = binder;\n\n    return declareConst({\n        name: `${SUB}${binderIndex}`, \n        init: callExpression({\n            callee: memberExpression({ \n                object: ast, \n                property: identifier('subscribe')\n            }),\n            args: [nodeBinding(moduleIndex, elIndex)]\n        }) \n    });\n};\n\nexport default (binder, i) => {\n    switch(binder.type) {\n        case VALUE:\n            return valueBinding(binder, i);\n        case SUBSCRIBE:\n            return subscribeBinding(binder, i);\n        default:\n            throw new Error(`Unsupported binding type ${binder.type}`);\n    }\n};\n\nexport const initBinder = ({ name, arg, index }) => {\n    return declareConst({\n        name: `${BINDER}${index}`,\n        init: callExpression({\n            name,\n            args: [{\n                type: 'Literal',\n                value: arg,\n                raw: typeof arg === 'string' ? `\"${arg}\"` : `${arg}`\n            }]\n        })\n    });\n};\n","import { \n    arrowFunctionExpression,\n    callExpression, \n    declareConst, \n    identifier } from './common';\nimport fragment from './fragment';\nimport binding from './binding';\nimport { NODES, RENDER, RENDERER_IMPORT, MAKE_FRAGMENT_IMPORT } from './identifiers';\n\n\n\n// const __nodes = __render${index}();\nconst renderNodes = index => {\n    return declareConst({ \n        name: NODES, \n        init: callExpression({ \n            callee: identifier(`${RENDER}${index}`)\n        })\n    });\n};\n\nexport const templateAFE = ({ binders, index }) => {\n    const bindings = binders.map(binding);\n    const statements = [\n        renderNodes(index),\n        ...bindings,\n        ...fragment(binders)\n    ];\n    return arrowFunctionExpression(statements);\n};\n\nexport const TTEtoAFE = (node, AFE) => {\n    node.type = 'CallExpression',\n    node.callee = AFE;\n};\n\nexport const renderer = (html, index) =>{\n    return declareConst({ \n        name: `${RENDER}${index}`, \n        init: callExpression({ \n            name: RENDERER_IMPORT,\n            args: [\n                callExpression({\n                    name: MAKE_FRAGMENT_IMPORT,\n                    args: [{\n                        type: 'Literal',\n                        value: html,\n                        raw: `\\`${html}\\``\n                    }]\n                })\n            ]\n        })\n    });  \n};\n","import { simple, base } from 'acorn/dist/walk.es';\nimport { Globals } from './globals';\nimport parse from '../ast';\nimport { generate } from 'astring';\nimport parseTemplate from '../parse/parse-template';\nimport { templateAFE, TTEtoAFE, renderer } from '../transformers/template';\nimport { specifier } from '../transformers/common';\nimport { initBinder } from '../transformers/binding';\nimport { RENDERER_IMPORT, MAKE_FRAGMENT_IMPORT } from '../transformers/identifiers';\n\nconst MODULE_NAME = 'diamond';\nconst SPECIFIER_NAME = 'html';\n\nexport default function compile(source) {\n    const ast = parse(source);\n\n    simple(ast, {\n        TaggedTemplateExpression(node, globals) {\n            if (node.tag.name !== globals.tag) return;\n            const { html, binders } = parseTemplate(node.quasi);\n            const index = globals.addFragment(html);\n            binders.forEach(b => b.moduleIndex = globals.addBinder(b));\n            \n            const newAst = templateAFE({ binders, index });\n            TTEtoAFE(node, newAst);\n        },\n        Program({ body }, { fragments, binders, imports, specifiers }) {\n            body.splice(0, 0, \n                ...fragments.map(renderer), \n                ...binders.map(initBinder));\n\n            if(specifiers) {\n                const binderImports = imports.map(name => specifier(name));\n                specifiers.push(...binderImports);\n            }\n        },\n        ImportDeclaration({ source, specifiers }, globals) {\n            if(!source.value.endsWith(MODULE_NAME)) return;\n            \n            globals.specifiers = specifiers;\n            const imports = [RENDERER_IMPORT, MAKE_FRAGMENT_IMPORT].map(specifier);\n            specifiers.push(...imports);\n            \n            const index = specifiers.findIndex(({ imported }) => imported.name === SPECIFIER_NAME); \n            if(index > -1) {\n                globals.tag = specifiers[index].local.name;\n                specifiers.splice(index, 1);\n            }\n        }\n\n    }, base, new Globals());\n\n    return generate(ast);\n}","import codeEqual from '../helpers/code-equal';\nimport compile from '../../src/compilers/compile';\n\ndescribe('compiler', () => {\n\n    it('hello world', () => {\n        const source = `\n            import { html as _ } from 'diamond';\n            const template = name => _\\`<span>Hello \\${name}</span>\\`;\n        `;\n\n        const compiled = compile(source);\n\n        const expected = `\n            const __render0 = renderer(makeFragment(\\`<span data-bind>Hello <text-node></text-node></span>\\`));\n            const __bind0 = __textBinder(1);\n            import { renderer, makeFragment, __textBinder } from 'diamond';\n            const template = name => (() => {\n                const __nodes = __render0();\n                __bind0(__nodes[0])(name);\n                return __nodes[__nodes.length];\n            })();\n        `;\n\n        codeEqual(compiled, expected);\n    }); \n\n    /*eslint no-unused-vars: off */\n    /* globals _ */\n    it('no import', () => {\n        function source() {\n            const template = name => _`<span>Hello ${name}</span>`;\n        }\n\n        const compiled = compile(source.toCode());\n\n        const expected = `\n            const __render0 = renderer(makeFragment(\\`<span data-bind>Hello <text-node></text-node></span>\\`));\n            const __bind0 = __textBinder(1);\n            const template = name => (() => {\n                const __nodes = __render0();\n                __bind0(__nodes[0])(name);\n                return __nodes[__nodes.length];\n            })();\n        `;\n\n        codeEqual(compiled, expected);\n    });\n\n    it('nested', () => {\n        const source = `\n            import { html as _ } from 'diamond';\n            const template = (foo , bar) => _\\`<div>\\${ foo ? _\\`<span>Hello \\${bar}</span>\\` : _\\`<span>Goodbye \\${bar}</span>\\`}</div>\\`;\n        `;\n        const compiled = compile(source);\n\n        const expected = `\n            const __render0 = renderer(makeFragment(\\`<span data-bind>Hello <text-node></text-node></span>\\`));\n            const __render1 = renderer(makeFragment(\\`<span data-bind>Goodbye <text-node></text-node></span>\\`));\n            const __render2 = renderer(makeFragment(\\`<div data-bind><text-node></text-node></div>\\`));\n            const __bind0 = __textBinder(1);\n            const __bind1 = __textBinder(0);\n            import { renderer, makeFragment, __textBinder } from 'diamond';\n            const template = (foo, bar) => (() => {\n                const __nodes = __render2();\n                __bind1(__nodes[0])(foo ? (() => {\n                    const __nodes = __render0();\n                    __bind0(__nodes[0])(bar);\n                    return __nodes[__nodes.length];\n                })() : (() => {\n                    const __nodes = __render1();\n                    __bind0(__nodes[0])(bar);\n                    return __nodes[__nodes.length];\n                })());\n                return __nodes[__nodes.length];\n            })();\n        `;\n\n        codeEqual(compiled, expected);\n    });\n\n  \n\n});","import chai from 'chai';\nconst assert = chai.assert;\nimport { UniqueStrings } from '../../src/compilers/globals';\n\n\ndescribe('Map By String Collection', () => {\n\n    const collection = new UniqueStrings();\n\n    it('returns new index on add', () => {\n        assert.equal(collection.add('some string'), 0);\n        assert.equal(collection.add('another string'), 1);\n    });\n\n    it('returns index of previous string', () => {\n        assert.equal(collection.add('some string'), 0);\n        assert.equal(collection.add('another string'), 1);\n    });\n\n    it('and does new strings again', () => {\n        assert.equal(collection.add('new one'), 2);\n    });\n\n    it('returns all as array', () => {\n        assert.deepEqual(collection.all, [\n            'some string',\n            'another string',\n            'new one',\n        ]);\n    });\n});","import { recursive } from 'acorn/dist/walk.es';\n\nconst MODULE_NAME = 'diamond';\nconst SPECIFIER_NAME = 'html';\n\nexport default function findImport(ast) {\n    let specifier = null;\n    recursive(ast, {}, {\n        ImportDeclaration(node) {\n            // TODO: expose as config so we don't have this weakish test\n            if(!node.source.value.endsWith(MODULE_NAME)) return;\n            specifier = node.specifiers.find(({ imported }) => imported.name === SPECIFIER_NAME);\n        }\n    });\n    return specifier;\n}","import { simple, base } from 'acorn/dist/walk.es';\n\n\n// TODO: manage scope if needed via ancestor walk\n// stack is maintained by acorn on future calls, \n// so we make a copy to preserve current stack, \n// and also exclude _this_ node from own ancestor stack\n// const ancestors = currentAncestors.slice(0, -1);\n\nconst TAG = '_';\n\nexport default function findTemplates(ast, { tag = TAG } = {}) {\n    const templates = [];\n    \n    simple(ast, {\n        TaggedTemplateExpression(node, st) {\n            if (node.tag.name !== tag) return;\n            st.push(node);\n        },\n\n    }, base, templates);\n\n    return templates;\n}\n","const isFn = /function/i;\n\nexport function findParams(ancestors) {\n\n    let i = ancestors.length - 1;\n    let node = null;\n    while(node = ancestors[i--]) {\n        if(isFn.test(node.type)) {\n            const { params } = node;\n            const identifiers = getIdentifiers(params);\n            return {\n                identifiers,\n                params\n            };\n        }\n    }\n\n    return { \n        identifiers: [],\n        params: []\n    };\n}\n\n//TODO: Can I use acorn walker for this?\nexport function getIdentifiers(params) {\n    const identifiers = [];\n\n    const types = {\n        Identifier: value => identifiers.push(value.name),\n        Property: value => getByType(value.value),\n        ObjectPattern: value => getProperties(value.properties)\n    };\n    const getProperties = list => list.forEach(getByType);\n    const getByType = value => types[value.type](value);\n\n    getProperties(params);\n    \n    return identifiers;\n}\n\n\n","import undeclared from 'undeclared';\n\nexport default function getObservables(ast, identifiers) {\n    return Array\n        .from(undeclared(ast).values())\n        .filter(name => false /*identifiers.has(name)*/);\n}","import findTemplates from './find-templates';\nimport { findParams } from './params';\nimport parseTemplate from './parse-template';\nimport matchObservables from './match-observables';\n\nexport default function parse(ast, { tag, index = 0 /*, identifiers: parentIdentifiers*/ } = {}) {\n    \n    return findTemplates(ast, { tag }).map((node, templateIndex) => {\n\n        const position = { start: node.start, end: node.end };\n        const { html, binders } = parseTemplate(node.quasi);\n        replaceTemplateWithIdentifier(node, index, templateIndex);\n        \n        // const { params, identifiers: current } = findParams(ancestors);\n        // const identifiers = combine(parentIdentifiers, current);\n\n        const recurse = (ast, index) => parse(ast, { tag, /* identifiers,*/ index });\n\n        binders.forEach((binder, i) => {\n            binder.templates = recurse(binder.ast, i);\n            // binder.params = matchObservables(binder.ast, identifiers);\n        });\n\n        return { html, binders/*, params*/, position, node };\n\n    });\n}\n\n// function combine(parent, child) {\n//     if (parent === undefined) return new Set(child);\n//     return new Set([...parent, ...child]);\n// }\n\nfunction replaceTemplateWithIdentifier(node, binderIndex, templateIndex) {\n    node.type = 'Identifier',\n    node.name = `__t${binderIndex}_${templateIndex}`;\n    delete node.tag;\n    delete node.quasi;\n    delete node.start;\n    delete node.end;\n}","import MagicString from 'magic-string';\nimport { Globals } from './globals';\n\nexport default function compile({ html, binders: b, params: p }, globals = new Globals()) {\n    const renderIndex = globals.addFragment(html);\n    b.forEach(binder => {\n        binder.moduleIndex = globals.addBinder(binder);\n    });\n\n    // const recurse = template => compile(template, globals);\n\n    return schema({\n        // params: params(p),\n        render: render(renderIndex),\n        // subtemplates: subtemplates(b, recurse),\n        bindings: bindings(b),\n        unsubscribes: unsubscribes(b)\n    });\n}\n\nconst indent = '    ';\n\nexport function schema({ render, bindings, unsubscribes, subtemplates = [] }) {\n    const template = (\n`((() => {\n    const __nodes = ${render};${\n    subtemplates.length ? `\n    ${subtemplates\n        .map(template => {\n            const firstLineIndex = template.indexOf('\\n');\n            return new MagicString(template)\n                .indent(indent.repeat(2), { \n                    exclude: [0 , firstLineIndex]\n                })\n                .toString();\n        })\n        .join('\\n' + indent.repeat(2))}`\n    : ''}${\n    bindings.length ? `\n    ${bindings.join('\\n' + indent.repeat(2))}`\n    : ''}${\n    unsubscribes.length ? `\n    const __fragment = __nodes[__nodes.length];\n    __fragment.unsubscribe = () => {\n        ${unsubscribes.join('\\n' + indent.repeat(3))}\n    };\n    return __fragment;`\n    : `\n    return __nodes[__nodes.length];`}\n})())`);\n\n    return template;\n}\n\nexport function render(index) {\n    return `__render${index}()`;\n}\n\nexport function params(params) {\n    return { \n        params: params.map(p => p.name),\n        destructure: []\n    };\n}\n\n\nexport function binders(binders) {\n    return binders.map(binder => {\n        return `const __bind${binder.moduleIndex} = ${binder.writeInit()};`;\n    });\n}\n\nexport function bindings(binders) {\n    return binders.map((binder, i) => {\n        const subscriber = binder.isSubscriber ? `const __sub${i} = ` : '';\n        const observer = `__bind${binder.moduleIndex}(__nodes[${binder.elIndex}])`;\n        return `${subscriber}${binder.writeBinding(observer)};`;\n    });\n}\n\nexport function subtemplates(binders, compile) {\n    return binders.reduce((templates, binder, iBinder) => {\n        return templates.concat(binder.templates.map((template, i) => {\n            return `const __t${iBinder}_${i} = ${compile(template)}`;\n        }));\n    }, []);\n}\n\nexport function unsubscribes(binders) {\n    return binders\n        // map first because we need to preserve original index\n        .map((binder, i) => {\n            if (!binder.isSubscriber) return;\n            return `__sub${i}.unsubscribe();`;\n        })\n        .filter(unsub => unsub);\n}","import findImport from '../parse/find-import';\nimport parse from '../parse/parse';\nimport MagicString from 'magic-string';\nimport parseAst from '../ast';\nimport { Globals } from './globals';\nimport compiler from './template';\n\nexport default function compile(source) {\n    const s = new MagicString(source);\n    const ast = parseAst(source);\n\n    const specifier = findImport(ast);\n    const options = specifier ? { tag: specifier.local.name } : {};\n\n    const templates = parse(ast, options);\n    console.log('TEMPLATES', templates.length);\n\n    const globals = new Globals();\n    templates.forEach(template => {\n        const compiled = compiler(template, globals);\n        const { start, end } = template.position;\n        s.overwrite(start, end, compiled);\n    });\n\n    const { imports, fragments, binders } = globals;\n\n    if (specifier) {\n        const allImports = ['renderer', 'makeFragment', ...imports];\n        s.overwrite(specifier.start, specifier.end, allImports.join());\n    }\n    \n    const initRenderers = fragments.map((html, i) => \n        `const __render${i} = renderer(makeFragment(\\`${html}\\`));`\n    );\n\n    const initBinders =  binders.map((binder, i) => {\n        return `const __bind${i} = ${binder};`;\n    });\n\n    const toPrepend = [...initRenderers, ...initBinders].join('\\n') + '\\n' ;\n\n    s.prepend(toPrepend);\n\n    return s.toString();\n}","/*globals _, makeFragment, renderer, __textBinder, __blockBinder, combineLatest */\n/*eslint semi: off */\n\nimport compile from '../../src/compilers/module';\nimport codeEqual from '../helpers/code-equal';\n\n// import chai from 'chai';\n// const assert = chai.assert;\n\n\ndescribe.skip('compiler', () => {\n\n    it('adds to import', () => {\n        const code = compile(`\n            import { html as _ } from 'diamond';\n            const template = foo => _\\`@\\${foo}\\`;\n        `);\n\n        codeEqual(code, `\n            const __render0 = renderer(makeFragment(\\`<text-node></text-node>\\`));\n            const __bind0 = __textBinder(0);\n            import { renderer, makeFragment, __textBinder } from 'diamond';\n            const template = foo => (() => {\n                const __nodes = __render0();\n                const __sub0 = foo.subscribe(__bind0(__nodes[0]));\n                const __fragment = __nodes[__nodes.length];\n                __fragment.unsubscribe = () => {\n                    __sub0.unsubscribe();\n                };\n                return __fragment;\n            })();`\n        );\n\n    });\n\n    it('compiles template with observer text nodes', () => {\n        function template() {\n            (foo, place) => _`@${foo}<span>hello @${place}</span>@${place}`;\n        }\n\n        const code = compile(template.toCode());\n\n        codeEqual(code, expected);\n\n        function expected() {\n            const __render0 = renderer(makeFragment(`<text-node></text-node><span data-bind>hello <text-node></text-node></span><text-node></text-node>`));\n            const __bind0 = __textBinder(1);\n            const __bind1 = __textBinder(0);\n            const __bind2 = __textBinder(2);\n            (foo, place) => (() => {\n                const __nodes = __render0();\n                const __sub0 = place.subscribe(__bind0(__nodes[0]));\n                const __sub1 = foo.subscribe(__bind1(__nodes[1]));\n                const __sub2 = place.subscribe(__bind2(__nodes[1]));\n                const __fragment = __nodes[__nodes.length];\n                __fragment.unsubscribe = () => {\n                    __sub0.unsubscribe();\n                    __sub1.unsubscribe();\n                    __sub2.unsubscribe();\n                };\n                return __fragment;\n            })();\n        }\n\n    });\n\n    it('compiles static expression', () => {\n        function template() {\n            (x, y) => _`${x} + ${y} = ${x + y}`;\n        }\n\n        const code = compile(template.toCode());\n\n        codeEqual(code, expected);\n\n        function expected() {\n            const __render0 = renderer(makeFragment(`<text-node></text-node> + <text-node></text-node> = <text-node></text-node>`));\n            const __bind0 = __textBinder(0);\n            const __bind1 = __textBinder(2);\n            const __bind2 = __textBinder(4);\n            (x, y) => (() => {\n                const __nodes = __render0();\n                __bind0(__nodes[0])(x);\n                __bind1(__nodes[0])(y);\n                __bind2(__nodes[0])(x + y);\n                return __nodes[__nodes.length];\n            })();\n        }\n\n    });\n});\n","// import scope from '../../src/compilers/scope';\nimport { recursive, base } from 'acorn/dist/walk.es';\nimport { generate } from 'astring';\nimport { assert } from 'chai';\n\nconst IDENTIFIER = '$';\n\nfunction compile(ast, visitors) {\n    const scope = Object.create(null);\n    const state = { \n        scope,\n        functionScope: scope \n    };\n\n    recursive(ast, state, {\n        TaggedTemplateExpression(node, state, c) {\n            console.log('TTE');\n            const { scope } = state;\n            const visitor = visitors[node.tag.name];\n            if(visitor) visitor(scope);\n            base.TaggedTemplateExpression(node, state, c);\n        },\n        Function(node, state, c) {\n            console.log('Function');\n            const { scope, functionScope } = state;\n            state.scope = state.functionScope = Object.create(scope);\n            base.Function(node, state, c);\n            state.scope = scope;\n            state.functionScope = functionScope;\n        },\n        AssignmentPattern(node, { scope, functionScope, declaration }) {\n            console.log('AssignmentPattern', node.left.name, declaration);\n            if(node.right.name!==IDENTIFIER) return;\n            const addTo = declaration === 'var' ? functionScope : scope;\n            addTo[node.left.name] = true;\n        },\n        VariableDeclaration(node, state, c) {\n            state.declaration = node.kind;\n            base.VariableDeclaration(node, state, c);\n            state.declaration = null;\n        },\n        VariablePattern({ name }, { scope }) {\n            console.log('VariablePattern', name);\n            if(scope[name]) scope[name] = false;\n        },\n        BlockStatement(node, state, c) {\n            console.log('BlockStatement');\n            const { scope } = state;\n            state.scope = Object.create(scope);\n            base.BlockStatement(node, state, c);\n            state.scope = scope;\n        }\n    }, base);\n\n}\n\n/*eslint no-unused-vars: off */\n/* globals _, _1, _2 $ */\n\nconst keyCount = obj => Object.keys(obj).filter(f => f!=='__function').length;\n\ndescribe.only('compiler', () => {\n\n    it('no import', done => {\n        function source() {\n            const template = name => _``;\n        }\n\n        compile(source.toAst(), {\n            _(scope) {\n                assert.equal(keyCount(scope), 0);\n                done();\n            }\n        });\n    });\n\n\n    /* globals item, BAR */\n    it('find observable', done => {\n\n        function source() {\n            const { name=$ } = item;\n            const { foo } = item;\n            const { bar=BAR } = item;\n            const template = _``;\n        }\n\n        compile(source.toAst(), {\n            _(scope) {\n                assert.equal(keyCount(scope), 1);\n                assert.ok(scope.name);\n                done();\n            }\n        });\n    });\n\n    it('function parameter observable', done => {\n\n        function source() {\n            const template = (name=$, foo, bar=BAR) => _``;\n        }\n\n        compile(source.toAst(), {\n            _(scope) {\n                assert.equal(keyCount(scope), 1);\n                assert.ok(scope.name);\n                done();\n            }\n        });\n    });\n\n    it('parameter not in scope for function sibling', () => {\n        function source() {\n            const one = (name=$, foo, bar=BAR) => _``;\n            const two = qux => _1``;\n        }\n\n        compile(source.toAst(), {\n            _(scope) {\n                assert.ok(scope.name);\n            },\n            _1(scope) {\n                assert.notOk(scope.name);\n            }\n        });\n    });\n\n    it('inner variable masks outer scope', () => {\n        function source() {\n            const { name=$ } = item;\n            const one = (name) => {\n                return _``;\n            };\n            const template = _1``;\n        }\n\n        compile(source.toAst(), {\n            _(scope) {\n                assert.notOk(scope.name);\n            },\n            _1(scope) {\n                assert.ok(scope.name);\n            }\n        });\n    });\n\n    it('through nested templates', () => {\n        function source() {\n            const template = (items=$) => _`\n                ${items.map((item=$) => _1`${item} of ${items.length}`)}\n            `;\n        }\n\n        compile(source.toAst(), {\n            _(scope) {\n                assert.ok(scope.items);\n                assert.notOk(scope.item);\n            },\n            _1(scope) {\n                assert.ok(scope.items);\n                assert.ok(scope.item);\n            }\n        });\n    });\n\n    it('block scope', () => {\n        function source() {\n            _1``;\n            {\n                const { name=$ } = item;\n                _``;\n            }\n            _1``;\n        }\n\n        compile(source.toAst(), {\n            _(scope) {\n                assert.ok(scope.name);\n            },\n            _1(scope) {\n                assert.notOk(scope.name);\n            }\n        });\n    });\n\n    // NOTE: if hoisting would be supported,\n    // _1`` below should have \"name\" in scope.\n    // Destructure has to be init-ed though,\n    // so doesn't seem something that needs to be supported\n    it('var survives block, but not hoisted', () => {\n        function source() {\n            _1``;\n            {\n                var { name=$ } = item;\n                _``;\n            }\n            _``;\n        }\n\n        compile(source.toAst(), {\n            _(scope) {\n                assert.ok(scope.name);\n            },\n            _1(scope) {\n                assert.notOk(scope.name);\n            }\n        });\n    });\n\n\n  \n\n});","import parse from '../../src/ast';\n\nFunction.prototype.toCode = function() {\n    const trimmed = this.toString().trim();\n    const length = trimmed.length;\n\n    const tryBlockArrow = trimmed.replace(/^\\(\\) => {/, '');\n    if(tryBlockArrow.length !== length) {\n        \n        return tryBlockArrow\n            .slice(0,-1)\n            .trim();\n    }\n\n    const tryArrow = trimmed.replace(/^\\(\\) => /, '');\n    if(tryArrow.length !== length) {\n        return tryArrow.trim();\n    }\n\n    return trimmed\n        .replace(`function ${this.name}() {`, '')\n        .slice(0,-1)\n        .trim();\n};\n\nFunction.prototype.toAst = function() {\n    return parse(this.toCode());\n};\n\nFunction.prototype.toExpr = function () {\n    return this.toAst().body[0].expression; \n};\n\n","/*eslint no-undef: off, no-unused-vars: off */\nimport '../helpers/to-code';\nimport codeEqual from '../helpers/code-equal';\nimport compile, { schema, binders, bindings, unsubscribes, subtemplates } from '../../src/compilers/template';\nimport Binder from '../../src/binders/binder';\nimport parse from '../../src/parse/parse';\nimport { VALUE, MAP, SUBSCRIBE } from '../../src/binders/binding-types';\nimport { text, block, attribute } from '../../src/binders/targets';\n\nimport chai from 'chai';\nconst assert = chai.assert;\n\ndescribe.skip('compile template', () => {\n\n    describe('integration (full template)', () => {\n\n        const parseTemplates = source => parse(source.toAst());\n\n        it('simple', () => {\n\n            function source() {\n                const template = name => _`<span>Hello ${name}</span>`;\n            }\n\n            const [ template ] = parseTemplates(source);\n            const compiled = compile(template);\n\n            codeEqual(compiled, expected);\n\n            function expected() {\n                (() => {\n                    const __nodes = __render0();\n                    __bind0(__nodes[0])(name);\n                    return __nodes[__nodes.length];\n                })();\n            }\n        });\n\n        it.skip('nested only work on one template at a time', () => {\n\n            function source() {\n                const template = () => _`<span>${foo ? _`one` : _`two`}${_`three ${_`four`}`}</span>`;\n            }\n\n            const [ template ] = parseTemplates(source);\n            const compiled = compile(template);\n\n            codeEqual(compiled, expected);\n\n            function expected() {\n                (() => {\n                    const __nodes = __render0();\n                    const __t0_0 = (() => {\n                        const __nodes = __render1();\n                        return __nodes[__nodes.length];\n                    })();\n                    const __t0_1 = (() => {\n                        const __nodes = __render2();\n                        return __nodes[__nodes.length];\n                    })();\n                    __bind0(__nodes[0])(foo ? __t0_0 : __t0_1);\n                    __bind1(__nodes[0])((() => {\n                        const __nodes = __render3();\n                        const __t0_0 = (() => {\n                            const __nodes = __render4();\n                            return __nodes[__nodes.length];\n                        })();\n                        __bind1(__nodes[0])(__t0_0);\n                        return __nodes[__nodes.length];\n                    })());\n                    return __nodes[__nodes.length];\n                })();\n            }\n        });\n    });\n\n    describe('schema', () => {\n\n        it('all', () => {\n            const binders = ['binder1;', 'binder2;'];\n            const params = {\n                params: ['param1', 'param2'],\n                destructure: ['destructure1;', 'destructure2;']\n            };\n            const render = 'render0';\n            const bindings = ['bindings1;', 'bindings2;'];\n            const unsubscribes = ['unsubscribe1;', 'unsubscribe1;'];\n\n            const template = schema({ binders, params, render, bindings, unsubscribes });\n            codeEqual(template, expected);\n\n            function expected() {\n                (() => {\n                    const __nodes = render0;\n                    bindings1;\n                    bindings2;\n                    const __fragment = __nodes[__nodes.length];\n                    __fragment.unsubscribe = () => {\n                        unsubscribe1;\n                        unsubscribe1;\n                    };\n                    return __fragment;\n                })();\n            }\n        });\n\n        it('no destructure or unsubscribe', () => {\n            const binders = ['binder1;', 'binder2;'];\n            const params = {\n                params: ['param1', 'param2'],\n                destructure: []\n            };\n            const render = 'render0';\n            const bindings = ['bindings1;', 'bindings2;'];\n            const unsubscribes = [];\n\n            const template = schema({ binders, params, render, bindings, unsubscribes });\n            codeEqual(template, expected);\n            \n            function expected() {\n                (() => {\n                    const __nodes = render0;\n                    bindings1;\n                    bindings2;\n                    return __nodes[__nodes.length];\n                })();\n            }\n        });\n\n        it('minimal', () => {\n            const binders = [];\n            const params = {\n                params: [],\n                destructure: []\n            };\n            const render = 'render0';\n            const bindings = [];\n            const unsubscribes = [];\n\n            const template = schema({ binders, params, render, bindings, unsubscribes });\n            codeEqual(template, expected);\n\n            function expected() {\n                (() => {\n                    const __nodes = render0;\n                    return __nodes[__nodes.length];\n                })();\n            }\n        });\n    });\n\n\n    // TODO: move to module\n    describe.skip('binders', () => {\n\n        function getBinder(target, childIndex, name) {\n            const binder = new Binder({}, target);\n            binder.init({ childIndex }, name);\n            return binder;\n        }    \n\n        const targets =  [\n            getBinder(text, 1),\n            getBinder(attribute, -1, 'foo'),\n            getBinder(block, 2),\n        ];\n\n        it('identifiers', () => {\n            assert.deepEqual(binders(targets), [\n                `const __bind0 = __textBinder(1);`,\n                `const __bind1 = __attrBinder('foo');`,\n                `const __bind2 = __blockBinder(2);`\n            ]);\n        });\n\n    });\n\n\n    describe('bindings', () => {\n        let index = 0;\n\n        function getBinder(options, params, elIndex = 0) {\n            const binder = new Binder(options);\n            binder.params = params;\n            binder.elIndex = elIndex;\n            binder.moduleIndex = index++;\n            return binder;\n        }    \n\n        const identifiers =  [\n            getBinder({ ast: (() => foo).toExpr(), type: SUBSCRIBE }, ['foo']),\n            getBinder({ ast: (() => non).toExpr(), type: VALUE }, []),\n            getBinder({ ast: (() => non).toExpr(), type: MAP }, []),\n            getBinder({ ast: (() => bar).toExpr(), type: VALUE }, ['bar']),\n            getBinder({ ast: (() => qux).toExpr(), type: MAP }, ['qux']),\n        ];\n\n        const expressions =  [\n            getBinder({ ast: (() => foo + 1).toExpr(), type: SUBSCRIBE }, ['foo']),\n            getBinder({ ast: (() => non + 1).toExpr(), type: VALUE }, []),\n            getBinder({ ast: (() => non + 1).toExpr(), type: MAP }, []),\n            getBinder({ ast: (() => bar + 1).toExpr(), type: VALUE }, ['bar']),\n            getBinder({ ast: (() => qux + 1).toExpr(), type: MAP }, ['qux']),\n        ];\n\n        it('identifiers', () => {\n            assert.deepEqual(bindings(identifiers), [\n                `const __sub0 = foo.subscribe(__bind0(__nodes[0]));`,\n                `__bind1(__nodes[0])(non);`,\n                `__bind2(__nodes[0])(non);`,\n                `const __sub3 = bar.first().subscribe(__bind3(__nodes[0]));`,\n                `const __sub4 = qux.subscribe(__bind4(__nodes[0]));`,\n            ]);\n        });\n\n        it('expressions', () => {\n            assert.deepEqual(bindings(expressions), [\n                `const __sub0 = (foo + 1).subscribe(__bind5(__nodes[0]));`,\n                `__bind6(__nodes[0])(non + 1);`,\n                `__bind7(__nodes[0])(non + 1);`,\n                `const __sub3 = bar.map((bar) => (bar + 1)).first().subscribe(__bind8(__nodes[0]));`,\n                `const __sub4 = qux.map((qux) => (qux + 1)).subscribe(__bind9(__nodes[0]));`,\n            ]);\n        });\n\n        it('unsubscribes', () => {\n            const expected = [\n                `__sub0.unsubscribe();`,\n                `__sub3.unsubscribe();`,\n                `__sub4.unsubscribe();`,\n            ];\n            assert.deepEqual(unsubscribes(identifiers), expected);\n            assert.deepEqual(unsubscribes(expressions), expected);\n        });\n    });\n\n    describe('subtemplates', () => {\n       \n        it('write subtemplates', () => {\n            const binder = new Binder({ \n                ast: (() => foo ? __t0_0 : __t0_1).toExpr(),\n                type: 'observer'\n            });\n            binder.params =  ['foo'];\n            binder.templates = ['template1', 'template2'];\n            const compiled = [];\n            const compile = template => compiled.push(template);\n\n            assert.deepEqual(subtemplates([binder], compile), [\n                `const __t0_0 = 1`,\n                `const __t0_1 = 2`\n            ]);\n        });\n\n    });\n\n\n});","/* global describe, it */\nimport parse from '../../src/ast';\nimport findImport from '../../src/parse/find-import';\nimport chai from 'chai';\nconst assert = chai.assert;\n\ndescribe('find import specifier', () => {\n\n    const getSpecifier = source => findImport(parse(source));\n\n    function testSpecifier(specifier, expected = 'html') {\n        assert.ok(specifier);\n        assert.equal(specifier.local.name, expected);\n    }\n\n    it('from import', () => {\n        const specifier = getSpecifier(`import { html } from 'diamond';`);\n        testSpecifier(specifier);\n    });\t\n\n    it('from imports', () => {\n        const specifier = getSpecifier(`\n            import foo from './foo';\n            import { html } from 'diamond';\n            import bar from './bar'`);\n        testSpecifier(specifier);\n    });\t\n    \n    it('from alias', () => {\n        const specifier = getSpecifier(`import { html as $ } from 'diamond';`);\n        testSpecifier(specifier, '$');\n    });\n\n    it('in list', () => {\n        const specifier = getSpecifier(`import { html, css } from 'diamond';`);\n        testSpecifier(specifier);\n    });\n\n    it('no import okay', () => {\n        const specifier = getSpecifier(`import fs from 'fs';`);\n        assert.notOk(specifier);\n    });\n\n});","/*eslint no-unused-vars: off */\n/* globals _ */\nimport { assert } from 'chai';\nimport findTemplates from '../../src/parse/find-templates';\n\ndescribe('find templates', () => {\n    \n    const getTemplate = source => findTemplates(source.toAst());\n    \n    // const isProgramTTE = ({ ancestors, node }) => {\n    //     assert.ok(ancestors.length);\n    //     assert.equal(ancestors[0].type, 'Program');\n    //     assert.equal(node.type, 'TaggedTemplateExpression');\n    // };\n\n\n    const isTTE = (node) => {\n        assert.equal(node.type, 'TaggedTemplateExpression');\n    };\n\n    const parentType = ({ ancestors }) => ancestors[ancestors.length - 1].type;\n\n    it('raw', () => {\n    \n        function source() {\n            _`<span>${'foo'}</span>`;\n        }\n\n        const templates = getTemplate(source);\n        assert.equal(templates.length, 1);\n        const [ template ] = templates;\n        isTTE(template);\n        // assert.equal(parentType(template), 'ExpressionStatement');\n    });\n\n    it('direct return from arrow function', () => {\n\n        function source() {\n            foo => _`<span>${foo}</span>`;\n        }\n\n        const templates = getTemplate(source);\n        assert.equal(templates.length, 1);\n        const [ template ] = templates;\n        isTTE(template);\n        // assert.equal(parentType(template), 'ArrowFunctionExpression');\n    });\n\n    it('variable declaration', () => {\n\n        function source() {\n            const foo = _`<span>${foo}</span>`;\n        }\n\n        const templates = getTemplate(source);\n        assert.equal(templates.length, 1);\n        const [ template ] = templates;\n        isTTE(template);\n        // assert.equal(parentType(template), 'VariableDeclarator');\n    });\n\n    it('sibling templates', () => {\n\n        function source() {\n            const t1 = foo => _`<span>${foo}</span>`;\n            const t2 = bar => _`<span>${bar}</span>`;\n        }\n\n        const templates = getTemplate(source);\n        assert.equal(templates.length, 2);\n        isTTE(templates[0]);\n        isTTE(templates[1]);     \n    });\n\n    it('nested templates', () => {\n        function source() {\n            foo => _`<span>${ _`nested` }</span>`;\n        }\n\n        const templates = getTemplate(source);\n        assert.equal(templates.length, 2);\n        isTTE(templates[0]);\n        isTTE(templates[1]);  \n    });\n});\n","/*eslint no-undef: off */\nimport matchObservables from '../../src/parse/match-observables';\nimport chai from 'chai';\nconst assert = chai.assert;\n\ndescribe.skip('match observables', () => {\n\n    const match = source => matchObservables(\n        source.toAst(),\n        new Set(['foo', 'bar', 'qux'])\n    );\n    \n    it('match', () => {\n        const source = () => foo;\n        assert.deepEqual(match(source), ['foo']);\n    }); \n    \n    it('no match', () => {\n        const source = () => noFoo;\n        assert.deepEqual(match(source), []);\n    }); \n\n    it('multiple matches', () => {\n        const source = () => foo + bar + qux;\n        assert.deepEqual(match(source), ['foo', 'bar', 'qux']);\n    }); \n\n    it('mixed', () => {\n        const source = () => noFoo + bar;\n        assert.deepEqual(match(source), ['bar']);\n    });\n});\n\n","/* eslint no-unused-vars: off */\n/* globals _ */\nimport { assert } from 'chai';\nimport getTaggedTemplates from '../../src/parse/find-templates';\nimport { findParams, getIdentifiers } from '../../src/parse/params';\n\nconst getTemplates = source => getTaggedTemplates(source.toAst());\n\ndescribe.skip('params', () => {\n\n    describe('get identifiers', () => {\n\n        it('single param', () => {\n            const identifiers = getIdentifiers([{\n                type: 'Identifier',\n                name: 'single'\n            }]);\n            assert.deepEqual(identifiers, ['single']);\n        });\n\n        it('two params', () => {\n            const identifiers = getIdentifiers([{\n                type: 'Identifier',\n                name: 'one'\n            },\n            {\n                type: 'Identifier',\n                name: 'two'\n            }]);\n            assert.deepEqual(identifiers, ['one', 'two']);\n        });\n\n        it('object pattern', () => {\n            const identifiers = getIdentifiers([{\n                type: 'ObjectPattern',\n                properties: [{\n                    type: 'Property',\n                    value: {\n                        type: 'Identifier',\n                        name: 'prop'\n                    }\n                }, {\n                    type: 'Property',\n                    value: {\n                        type: 'Identifier',\n                        name: 'alias'\n                    }\n                }]\n            }]);\n            assert.deepEqual(identifiers, ['prop', 'alias']);\n        });\n\n        it('nested object pattern', () => {\n            const identifiers = getIdentifiers([{\n                type: 'ObjectPattern',\n                properties: [{\n                    type: 'Property',\n                    value: {\n                        type: 'ObjectPattern',\n                        properties: [{\n                            type: 'Property',\n                            value: {\n                                type: 'Identifier',\n                                name: 'nested'\n                            }        \n                        }]\n                    }\n                }]\n            }]);\n            assert.deepEqual(identifiers, ['nested']);\n        });\n    });\n\n    describe('simple top-level', () => {\n\n        const findParamsFor = source => {\n            const [{ ancestors }] = getTemplates(source);\n            return findParams(ancestors);\n        };\n                \n        it('raw', () => {\n            function source() {\n                _`<span>${'foo'}</span>`;\n            }\n            const { params, identifiers } = findParamsFor(source);\n            assert.deepEqual(identifiers, []);\n            assert.equal(params.length, 0);\n        });\n\n        it('direct arrow function return', () => {\n            function source() {\n                foo => _`<span>${foo}</span>`;\n            }\n            const { params, identifiers } = findParamsFor(source);\n            assert.deepEqual(identifiers, ['foo']);\n            assert.equal(params.length, 1);\n        });\n\n        it('named function return', () => {\n            function source() {\n                function named(foo) {\n                    return _`<span>${foo}</span>`;\n                }\n            }\n            const { params, identifiers } = findParamsFor(source);\n            assert.deepEqual(identifiers, ['foo']);\n            assert.equal(params.length, 1);\n        });\n\n        it('higher order function with template arrow', () => {\n            function source() {\n                function higherOrder(template) {\n                    return () => _`<span>#${template}</span>`;\n                }\n            }\n            const { params, identifiers } = findParamsFor(source);\n            assert.deepEqual(identifiers, []);\n            assert.equal(params.length, 0);\n        });\n\n        it('multiple params', () => {\n            function source() {\n                (foo, bar) => _`<span>${foo + bar}</span>`;\n            }\n\n            const { params, identifiers } = findParamsFor(source);\n            assert.deepEqual(identifiers, ['foo', 'bar']);\n            assert.equal(params.length, 2);\n        });\n    });\n\n    describe('sibling templates with shared scope', () => {\n        it('same identifer', () => {\n            function source() {\n                const t1 = (foo, condition) => {\n                    const view = _`<span>${foo}</span>`;\n                    const edit = _`<input value=${foo}>`;\n                    return _`${condition ? view : edit}`;\n                };\n            }\n\n            const test = ({ ancestors }) => {\n                const { params, identifiers } = findParams(ancestors);\n                assert.deepEqual(identifiers, ['foo', 'condition']);\n                assert.equal(params.length, 2);\n            };\n            \n            const templates = getTemplates(source);\n            assert.equal(templates.length, 3);\n\n            test(templates[0]);\n            test(templates[1]);\n            test(templates[2]);\n        });\n    });\n\n    describe('nested', () => {\n        it('raw', () => {\n            function source() {\n                foo => _`<span>${_`<p>nested</p>`}</span>`;\n            }\n\n            const [{ node, ancestors: parentAncestors }] = getTemplates(source);\n            const parentScope = findParams(parentAncestors);\n            \n            const [{ ancestors }] = getTaggedTemplates(node.quasi);\n\n            const { params, identifiers } = findParams(ancestors);\n            assert.deepEqual(identifiers, []);\n            assert.equal(params.length, 0);\n        });\n\n        it('with own params', () => {\n            function source() {\n                items => _`<span>${items.map(item => _`<p>nested</p>`)}</span>`;\n            }\n\n            const [{ node, ancestors: parentAncestors }] = getTemplates(source);\n            const parentScope = findParams(parentAncestors);\n\n            const [{ ancestors }] = getTaggedTemplates(node.quasi);\n\n            const { params, identifiers } = findParams(ancestors, parentScope);\n            assert.deepEqual(identifiers, ['item']);\n            assert.equal(params.length, 1);\n        });\n\n\n        it('siblings have own params', () => {\n            function source() {\n                const template = (items, condition) => {\n                    const one = _`<span>${items.map(one => _`<p>${one}</p>`)}</span>`;\n                    const two = _`<span>${items.map(two => _`<p>${two}</p>`)}</span>`;\n                    return _`${condition ? one : two}`;\n                };\n            }\n\n            const templates = getTemplates(source);\n            assert.equal(templates.length, 3);\n\n            const test = ({ node, ancestors: parentAncestors }, child) => {\n                const parentScope = findParams(parentAncestors);\n                const { params, identifiers } = parentScope;\n                assert.deepEqual(identifiers, ['items', 'condition']);\n                assert.equal(params.length, 2);\n\n                if (child) {\n                    const [{ ancestors }] = getTaggedTemplates(node.quasi);\n                    const { params, identifiers } = findParams(ancestors, parentScope);\n                    assert.deepEqual(identifiers, [child]);\n                    assert.equal(params.length, 1);\n                }                \n            };\n\n            test(templates[0], 'one');\n            test(templates[1], 'two');\n            test(templates[2]);\n        });\n    });\n});\n","/*eslint no-unused-vars: off */\n/* globals _ */\nimport findTemplates from '../../src/parse/find-templates';\nimport { VALUE, MAP, SUBSCRIBE } from '../../src/binders/binding-types';\nimport { findParams } from '../../src/parse/params';\nimport parseTemplate from '../../src/parse/parse-template';\nimport chai from 'chai';\nconst assert = chai.assert;\n\n\nconst parseSource = source => {\n    const { quasi } = findTemplates(source.toAst())[0];\n    // const { identifiers } = findParams(ancestors);\n    return parseTemplate(quasi) ; //, new Set(identifiers)); \n};\n\ndescribe('parse template', () => {\n\n    describe('text-node', () => {\n    \n        function testFirst(binders, options) {\n            assert.equal(binders.length, 1);\n            testText(binders[0], options);\n        }    \n\n        function testText(binder, {\n            elIndex = 0,\n            moduleIndex = -1,\n            index = 0,\n            name = '',\n            type = MAP,\n            ref = '',\n            params = null,\n            templates = null\n        } = {}) {\n            const { name: astName, type: astType } = binder.ast;\n            assert.equal(astType, 'Identifier');\n            assert.equal(astName, ref);\n            delete binder.ast;\n            delete binder.target;\n            assert.deepEqual(binder, { elIndex, moduleIndex, index, name, type, params, templates }, `ref: ${ref}`);\n        }\n\n        it('stand-alone text node', () => {\n            function source() {\n                const template = foo => _`*${foo}`;\n            }\n            const { html, binders } = parseSource(source);\n            assert.equal(html, '<text-node></text-node>');\n            testFirst(binders, { ref: 'foo' });\n        });\n\n        it('value text node', () => {\n            function source() {\n                const template = foo => _`${foo}`;\n            }\n            const { html, binders } = parseSource(source);\n            assert.equal(html, '<text-node></text-node>');\n            testFirst(binders, { ref: 'foo', type: VALUE });\n        });\n\n        it('block text node', () => {\n            function source() {\n                const template = foo => _`${foo}#`;\n            }\n            const { html, binders } = parseSource(source);\n            assert.equal(html, '<block-node></block-node>');\n            testFirst(binders, { ref: 'foo', type: VALUE });\n        });\n\n        it('block observer text node', () => {\n            function source() {\n                const template = foo => _`*${foo}#`;\n            }\n            const { html, binders } = parseSource(source);\n            assert.equal(html, '<block-node></block-node>');\n            testFirst(binders, { ref: 'foo' });\n        });\n\n        it('element with text node', () => {\n            function source() {\n                const template = place => _`<span>hello *${place}</span>`;\n            }\n\n            const { html, binders } = parseSource(source);\n\n            assert.equal(html,\n                '<span data-bind>hello <text-node></text-node></span>'\n            );\n            testFirst(binders, { index: 1, ref: 'place' });\n        });\n\n        it('second element with text node', () => {\n            function source() {\n                const template = place => _`<span>hello</span> <span>*${place}</span>`;\n            }\n\n            const { html, binders } = parseSource(source);\n\n            assert.equal(html,\n                '<span>hello</span> <span data-bind><text-node></text-node></span>'\n            );\n            testFirst(binders, { ref: 'place' });\n        });\n\n        it('two elements with text node', () => {\n            function source() {\n                const template = (salutation, place) => _`<span>*${salutation}</span> <span>*${place}</span>`;\n            }\n\n            const { html, binders } = parseSource(source);\n\n            assert.equal(html,\n                '<span data-bind><text-node></text-node></span> <span data-bind><text-node></text-node></span>'\n            );\n            assert.equal(binders.length, 2);\n            testText(binders[0], { ref: 'salutation' });\n            testText(binders[1], { elIndex: 1, ref: 'place' });\n        });\n\n        it('one elements with two text node', () => {\n            function source() {\n                const template = (salutation, place) => _`<span>*${salutation} *${place}</span>`;\n            }\n\n            const { html, binders } = parseSource(source);\n\n            assert.equal(html,\n                '<span data-bind><text-node></text-node> <text-node></text-node></span>'\n            );\n            assert.equal(binders.length, 2);\n            testText(binders[0], { ref: 'salutation' });\n            testText(binders[1], { index: 2, ref: 'place' });\n        });\n\n        it('child element with text node', () => {\n            function source() {\n                const template = foo => _`<div><span>*${foo}</span></div>`;\n            }\n\n            const { html, binders } = parseSource(source);\n\n            assert.equal(html,\n                '<div><span data-bind><text-node></text-node></span></div>'\n            );\n            testFirst(binders, { ref: 'foo' });\n        });\n\n        it('multiple nested elements with text node', () => {\n            function source() {\n                const template = (one, two, three, four, five) => _`\n                    <div>*${one}\n                        <span>*${three}</span>\n                        <p><span>*${five}</span>*${four}</p>\n                        *${two}\n                    </div>\n                `;\n            }\n\n            const { html, binders } = parseSource(source);\n            assert.equal(html, `\n                    <div data-bind><text-node></text-node>\n                        <span data-bind><text-node></text-node></span>\n                        <p data-bind><span data-bind><text-node></text-node></span><text-node></text-node></p>\n                        <text-node></text-node>\n                    </div>\n                `);\n            \n            assert.equal(binders.length, 5);\n            testText(binders[0], { elIndex: 0, ref: 'one' });\n            testText(binders[1], { elIndex: 0, index: 6, ref: 'two' });\n            testText(binders[2], { elIndex: 1, ref: 'three' });\n            testText(binders[3], { elIndex: 2, index: 1, ref: 'four' });\n            testText(binders[4], { elIndex: 3, ref: 'five' });\n        });\n    });\n\n    describe('attribute', () => {\n\n        function testFirst(binders, options) {\n            assert.equal(binders.length, 1);\n            testAttr(binders[0], options);\n        }   \n        \n        function testAttr(binder, {\n            elIndex = 0,\n            moduleIndex = -1,\n            name = '',\n            index = -1,\n            type = VALUE,\n            ref = '',\n            params = null,\n            templates = null\n        } = {}) {\n            assert.ok(binder, 'binder does not exist');\n            const { ast } = binder;\n            assert.equal(ast.type, 'Identifier');\n            assert.equal(ast.name, ref);\n            delete binder.ast;\n            delete binder.target;\n            assert.deepEqual(binder, { elIndex, moduleIndex, name, index, type, params, templates }, `name: ${name}`);\n        }\n\n        it('simple', () => {\n            function source() {\n                const template = foo => _`<span bar=${foo}></span>`;\n            }\n            const { html, binders } = parseSource(source);\n            assert.equal(html, '<span bar=\"\" data-bind></span>');\n            testFirst(binders, { name: 'bar', ref: 'foo' });\n        });\n\n        it('with statics, value and valueless', () => {\n            function source() {\n                const template = foo => _`<input class=${foo} type=\"checkbox\" checked>`;\n            }\n            const { html, binders } = parseSource(source);\n            // NOTE: empty string is equivalent to boolean attribute per spec.\n            assert.equal(html, '<input class=\"\" type=\"checkbox\" checked=\"\" data-bind>');\n            testFirst(binders, { name: 'class', ref: 'foo' });\n        });\n\n        it('many', () => {\n            function source() {\n                const template = (one, two, three, four, five) => _`\n                    <div one=${one}>\n                        <span two=${two}>${three}</span>\n                        <p><span four=${four}>text</span></p>\n                    </div>\n                `;\n            }\n            const { html, binders } = parseSource(source);\n            assert.equal(html, `\n                    <div one=\"\" data-bind>\n                        <span two=\"\" data-bind><text-node></text-node></span>\n                        <p><span four=\"\" data-bind>text</span></p>\n                    </div>\n                `);\n            \n            assert.equal(binders.length, 4);\n            testAttr(binders[0], { elIndex: 0, name: 'one', ref: 'one' });\n            testAttr(binders[1], { elIndex: 1, name: 'two', ref: 'two' });\n            testAttr(binders[3], { elIndex: 2, name: 'four', ref: 'four' });\n        });\n\n        it('binding types', () => {\n            function source() {\n                const template = (one, two, three) => _`<span one=${one} two=*${two} three=@${three}></span>`;\n            }\n            const { html, binders } = parseSource(source);\n            assert.equal(html, '<span one=\"\" two=\"\" three=\"\" data-bind></span>');\n            assert.equal(binders.length, 3);\n            testAttr(binders[0], { type: VALUE, name: 'one', ref: 'one' });\n            testAttr(binders[1], { type: MAP, name: 'two', ref: 'two' });\n            testAttr(binders[2], { type: SUBSCRIBE, name: 'three', ref: 'three' });\n        });\n    });\n\n    describe('html', () => {\n        it('leaves void elements intact', () => {\n            function source() {\n                const template = foo => _`<input>`;\n            }\n            const { html, binders } = parseSource(source);\n            assert.equal(html, '<input>');\n        });\n    });\n});\n","/*eslint no-unused-vars: off */\n/* globals _ */\nimport parse from '../../src/parse/parse';\nimport astParse from '../../src/ast';\nimport chai from 'chai';\nconst assert = chai.assert;\n\nconst parseTemplates = source => parse(source.toAst());\n\n\ndescribe('parse', () => {\n\n    function testTemplate({ html, bindings, node }) {\n        assert.isNotNull(html);\n        assert.isNotNull(bindings);\n        assert.isNotNull(node);       \n    }\n\n    it('single template', () => {\n    \n        function source() {\n            const template = (foo, bar) => _`\n                <span class-foo=${foo}>hello ${bar}</span>\n            `;\n        }\n        const templates = parseTemplates(source);\n        assert.equal(templates.length, 1, 'expected one template');\n        templates.forEach(testTemplate);\n    });\n\n    it('sibling templates', () => {\n        function source() {\n            const template1 = foo => _`${foo}`;\n            const template2 = foo => _`${foo}`;\n        }\n\n        const templates = parseTemplates(source);\n        assert.equal(templates.length, 2);\n        templates.forEach(testTemplate);\n    });\n    \n    // TODO: nest template in non-block should warn\n    \n    it('nested template', () => {\n        function source() {\n            const template = items => _`\n                <ul>\n                    #${items.map(item => _`\n                        <li>${item}</li>\n                    `)}\n                </ul>\n            `;\n        }\n\n        const templates = parseTemplates(source);\n        assert.equal(templates.length, 2);\n        templates.forEach(testTemplate);\n\n    });\n\n    it.skip('nested template with outer scope', () => {\n        function source() {\n            const template = items => _`\n                <ul>\n                    #${items.length || _`<span>No items</span>`}\n                    #${items.map(item => _`\n                        <li>${item + 'of' + items}</li>\n                    `)}\n                </ul>\n            `;\n        }\n\n        const templates = parseTemplates(source);\n        const [{ binders: outerBinders }] = templates;\n\n        const [ firstOuter, secondOuter ] = outerBinders;\n        \n        {\n            const { templates: nested } = firstOuter;\n            assert.equal(nested.length, 1);\n\n            nested.forEach((t, i) => testTemplate(t, i, 0));\n            const [{ params, binders }] = nested;\n            assert.equal(params.length, 0);\n            assert.equal(binders.length, 0);\n        }\n\n        {\n            const { templates: nested } = secondOuter;\n            assert.equal(nested.length, 1);\n\n            nested.forEach((t, i) => testTemplate(t, i, 1));\n            const [{ params, binders }] = nested;\n            assert.equal(params.length, 1);\n            assert.equal(binders.length, 1);\n\n            const [binder] = binders;\n            // TODO: skipping because how params handled is changing\n            //assert.deepEqual(binder.params, ['item', 'items']);\n        }\n    });\n\n});\n","import chai from 'chai';\nconst assert = chai.assert;\nimport { getBindingType, getBlock } from '../../src/parse/sigil';\nimport { VALUE, MAP, SUBSCRIBE } from '../../src/binders/binding-types';\n\n\ndescribe('sigils', () => {\n\n    describe('binding type', () => {\n\n        function test(text, expected) {\n            assert.deepEqual(getBindingType(text), expected);\n        }\n\n        it('empty string okay', () => {\n            test('', { type: VALUE, text: ''});\n        });\n\n        it('value', () => {\n            test('text', { type: VALUE, text: 'text' });\n        });\n\n        it('map observer', () => {\n            test('text*', { type: MAP, text: 'text'});\n        });\n\n        it('subscribe', () => {\n            test('text@', { type: SUBSCRIBE, text: 'text'});\n        });\n\n        it('is end of string', () => {\n            test('* ', { type: VALUE, text: '* '});\n        });\n\n        it('escaped *', () => {\n            test('text\\\\*', { type: VALUE, text: 'text*' });\n        });\n\n        it('escaped @', () => {\n            test('text\\\\@', { type: VALUE, text: 'text@' });\n        });\n    });\n\n\n    describe('block', () => {\n\n        function test(text, expected) {\n            assert.deepEqual(getBlock(text), expected);\n        }\n\n        it('empty string okay', () => {\n            test('', { block: false, text: '' });\n        });\n\n        it('no block', () => {\n            test('text', { block: false, text: 'text' });\n        });\n\n        it('block', () => {\n            test('#text', { block: true, text: 'text' });\n        });\n\n        it('escaped block', () => {\n            test('\\\\#text', { block: false, text: '#text' });\n        });\n\n\n    });\n});\n","/* global describe, it */\nimport chai from 'chai';\n// import parseTemplate from '../src/parse-template';\nconst assert = chai.assert;\n\ndescribe.skip('makes', () => {\n\n    // it('element attributes', () => {\n    //     const { html, bindings } = parseTemplate(`\n    //         done => $\\`<span \n    //             class=\"hello\" \n    //             class-done=\\${done} \n    //             data-custom=\"custom\"></span>\\`\n    //     `);\n        \n    //     assert.deepEqual(html, '<span class=\"hello\" data-custom=\"custom\" data-bind></span>');\n\n    //     assert.deepEqual(bindings, \n    //         [{ \n    //             elIndex: 0,\n    //             type: 'class',\n    //             name: 'class-done',\n    //             ref: 'done' \n    //         }]\n    //     );\n    // });\n\n\n    // it('element text nodes', () => {\n    // \tconst { html, bindings } = parseTaggedTemplate(`\n    // \t\tplace => $\\`\n    // \t\t\t<span>\\${place}</span>\n    // \t\t\t<span>hello \\${place}</span>\n    // \t\t\t<span>hello \\${place}!</span>\n    // \t\t\\`\n    // \t`);\n            \n    // \tassert.equal(html, `\n    // \t\t\t<span data-bind><text-node></text-node></span>\n    // \t\t\t<span data-bind>hello <text-node></text-node></span>\n    // \t\t\t<span data-bind>hello <text-node></text-node>!</span>\n    // \t\t` \n    // \t);\n\n    // \tassert.deepEqual(bindings, \n    // \t\t[{ \n    // \t\t\telIndex: 0,\n    // \t\t\ttype: 'text',\n    // \t\t\tindex: 0,\n    // \t\t\tref: 'place' \n    // \t\t},\n    // \t\t{ \n    // \t\t\telIndex: 1,\n    // \t\t\ttype: 'text',\n    // \t\t\tindex: 1,\n    // \t\t\tref: 'place' \n    // \t\t},\n    // \t\t{ \n    // \t\t\telIndex: 2,\n    // \t\t\ttype: 'text',\n    // \t\t\tindex: 1,\n    // \t\t\tref: 'place' \n    // \t\t}]\n    // \t);\n\n    // \t// const greeting = place => $`<span>hello *${place}</span>`;\n    // \t// const render = $$(\n    // \t// \t'<span data-bind>hello <text-node></text-node></span>',\n    // \t// \t(() => { \n    // \t// \t\tconst b0 = bound.text({ ref: 'place', index: 1 });\n    // \t// \t\treturn nodes => {\n    // \t// \t\t\tb0(nodes[0]);\n    // \t// \t\t};\n    // \t// \t})()\n    // \t//);\n\n    // \t// const render2 = function $$(fragment, bind) {\n    // \t// \treturn () => {\n\n    // \t// \t}\n    // \t// }\n\n    // \t// fb.on('value', render);\n\n        \n    // });\n\n    // it('simple nested element with text node', () => {\n    // \tconst { html, bindings } = parseTaggedTemplate(`\n    // \t\tfoo => $\\`<div><span>\\${foo}</span></div>\\`\n    // \t`);\n            \n    // \tassert.equal(html, `<div><span data-bind><text-node></text-node></span></div>`);\n\n    // \tassert.deepEqual(bindings, \n    // \t\t[{ \n    // \t\t\telIndex: 0,\n    // \t\t\ttype: 'text',\n    // \t\t\tindex: 0,\n    // \t\t\tref: 'foo' \n    // \t\t}]\n    // \t);\n        \n    // });\n\n    // it('element with mixed child nodes', () => {\n    // \tconst { html, bindings } = parseTaggedTemplate(`\n    // \t\tfoo => $\\`<div><span>hello</span> \\${foo}</div>\\`\n    // \t`);\n            \n    // \tassert.equal(html, `<div data-bind><span>hello</span> <text-node></text-node></div>`);\n\n    // \tassert.deepEqual(bindings, \n    // \t\t[{ \n    // \t\t\telIndex: 0,\n    // \t\t\ttype: 'text',\n    // \t\t\tindex: 2,\n    // \t\t\tref: 'foo' \n    // \t\t}]\n    // \t);\t\n    // });\n\n    // it('multiple bound element in mixed child nodes', () => {\n    // \tconst { html, bindings } = parseTaggedTemplate(`\n    // \t\t(greeting, place) => $\\`<div><span>\\${greeting}</span> \\${place}</div>\\`\n    // \t`);\n            \n    // \tassert.equal(html, `<div data-bind><span data-bind><text-node></text-node></span> <text-node></text-node></div>`);\n\n    // \tassert.deepEqual(bindings, \n    // \t\t[{ \n    // \t\t\telIndex: 0,\n    // \t\t\ttype: 'text',\n    // \t\t\tindex: 2,\n    // \t\t\tref: 'place' \n    // \t\t}, { \n    // \t\t\telIndex: 1,\n    // \t\t\ttype: 'text',\n    // \t\t\tindex: 0,\n    // \t\t\tref: 'greeting' \n    // \t\t}]\n    // \t);\t\n    // });\n\n    // it('expression', () => {\n\n    // \t// (x, y) => $`*${x} + *${y} = *${x + y}`;\n    // \tconst compiled = parseTaggedTemplate(`\n    // \t\t(x, y) => $\\`*\\${x} + *\\${y} = *\\${x + y}\\`\n    // \t`);\n\n    // \tassert.deepEqual(compiled, {\n    // \t\thtml: '<text-node></text-node> + <text-node></text-node> = <text-node></text-node>',\n    // \t\tbindings: [{ \n    // \t\t\ttype: 'text',\n    // \t\t\tindex: 1,\n    // \t\t\tobservable: true,\n    // \t\t\tref: 'x',\n    // \t\t\telIndex: 0 \n    // \t\t}, { \n    // \t\t\ttype: 'text',\n    // \t\t\tindex: 3,\n    // \t\t\tobservable: true,\n    // \t\t\tref: 'y',\n    // \t\t\telIndex: 0 \n    // \t\t}, { \n    // \t\t\ttype: 'text',\n    // \t\t\tindex: 5,\n    // \t\t\tobservable: true,\n    // \t\t\texpr: 'x + y',\n    // \t\t\tparams: 'x,y',\n    // \t\t\telIndex: 0\n    // \t\t}]\n    // \t});\n        \n    // });\n\n\n});\n\ndescribe.skip('block compiles', () => {\n\n    it('basic section', () => {\n        const compiled = parseTemplate(`\n            items => $\\`<ul>\n                #\\${ items.map(item => $\\`\n                    <li>\\${ item }</li>\n                \\`)}\n            </ul>\\`\n        `);\n\n        assert.deepEqual(compiled, {\n            html: `<ul data-bind>\n                <section-node></section-node>\n            </ul>`,\n            bindings: [{ \n                elIndex: 0,\n                type: 'section',\n                index: 1,\n                expr: '?' \n            }]\n        });\t\n        \n    });\n});","import htmlparser from 'htmlparser2';\nimport chai from 'chai';\n// const assert = chai.assert;\n\ndescribe.skip('assumptions', () => {\n\n    it('closes void elements', () => {\n        const handler = {\n            onopentag(...args) {\n                console.log(args);\n            },\n            onclosetag(name) {\n                console.log(name);\n            }\n        };\n\n        const parser = new htmlparser.Parser(handler);\n        parser.write('<input><p><br>content</p>');\n        parser.end();\n    });  \n\n});","import chai from 'chai';\nconst assert = chai.assert;\nimport MagicString from 'magic-string';\n\ndescribe.skip('Magic String', () => {\n\n    it('ident', () => {\n        const source = `\n    one;\n    two;\n    three;`;\n        const s = new MagicString(source);\n        assert.equal(s.toString(), source);\n        s.indent();\n        assert.equal(s.toString(), source, 'AFTER');\n    });\n});","/*eslint no-undef: off */\nimport chai from 'chai';\nconst assert = chai.assert;\nimport { recursive, simple, base } from 'acorn/dist/walk.es';\n\nfunction full(node, callback, b = base, state, override) {\n    (function c(node, st, override) {\n        let type = override || node.type;\n        b[type](node, st, c);\n        callback(node, st, type);\n    })(node, state, override);\n}\n\n\ndescribe.skip('walkers', () => {\n\n\n    it('recursive', () => {\n        function source () {\n            function first(foo) {\n                const bar = (x, y) => _`<span>*${x + y}</span>`;\n            }\n        }\n\n        const ast = source.toAst();\n\n        let scope = null;\n         \n        recursive(ast, scope = {}, {\n            Function(node, state, c) {\n                const params = node.params.reduce((obj, p) => {\n                    obj[p.name] = true;\n                    return obj;\n                }, {});\n                state = Object.assign(state, params);\n                base.Function(node, state, c);\n            },\n            TaggedTemplateExpression(node, state) {\n                scope = state;\n            }\n        });\n\n        assert.deepEqual(scope, { foo: true, x: true, y: true });\n    });\n\n    it.skip('simple', () => {\n        function source () {\n            function first(foo) {\n                const bar = (x, y) => _`<span>*${x + y}</span>`;\n            }\n        }\n\n        const ast = source.toAst();\n\n        const called = [];\n         \n        simple(ast, {\n            Function(node, state) {\n                state.push([node.type, node.id  && node.id.name, node.params.length]);\n            }\n        }, undefined, called);\n\n        assert.deepEqual(called, []);\n    });\n\n    it.skip('full', () => {\n        function source () {\n            function first(foo) {\n                const bar = (x, y) => _`<span>*${x + y}</span>`;\n            }\n        }\n\n        const ast = source.toAst();\n\n        const called = [];\n            \n        full(ast, (node, st, type) => {\n            st.push(type);\n        }, null, called);\n\n        assert.deepEqual(called, []);\n    });\n\n});","import Binder from '../../src/binders/binder';\n\nexport default function getBinder(options, { module = 0, element = 0 } = {}) {\n    const binder = new Binder(options);\n    binder.elIndex = element;\n    binder.moduleIndex = module;\n    return binder;\n}\n","/*eslint no-undef: off */\nimport { generate } from 'astring';\nimport getBinder from './getBinder';\nimport { VALUE, SUBSCRIBE } from '../../src/binders/binding-types';\n\nimport { assert } from 'chai';\n\nimport binding from '../../src/transformers/binding';\n\ndescribe('transform - binding', () => {\n\n    it('value', () => {\n        const binder = getBinder(\n            { ast: (() => foo).toExpr(), type: VALUE },\n            { module: 1, element: 2 }\n        );\n        const ast = binding(binder, 0);\n        const code = generate(ast);\n        assert.equal(code, '__bind1(__nodes[2])(foo);');\n    });\n\n    it('subscribe', () => {\n        const binder = getBinder(\n            { ast: (() => foo).toExpr(), type: SUBSCRIBE },\n            { module: 1, element: 3 }\n        );\n        const ast = binding(binder, 1);\n        const code = generate(ast);\n        assert.equal(code, 'const __sub1 = foo.subscribe(__bind1(__nodes[3]));');\n    });\n    \n});","/*eslint no-undef: off */\nimport { generate } from 'astring';\nimport getBinder from './getBinder';\nimport { VALUE, SUBSCRIBE } from '../../src/binders/binding-types';\nimport { assert } from 'chai';\n\nimport fragment from '../../src/transformers/fragment';\n\ndescribe('transform - fragment nodes', () => {\n\n    const bindings = [\n        getBinder({ ast: (() => one).toExpr(), type: SUBSCRIBE }),\n        getBinder({ ast: (() => two).toExpr(), type: VALUE }),\n        getBinder({ ast: (() => three).toExpr(), type: SUBSCRIBE }),\n    ];\n\n    it('direct return', () => {\n        const code = fragment([]).map(generate);\n        assert.deepEqual(code, [\n            'return __nodes[__nodes.length];'\n        ]);\n    });\n\n    it('unsubscribes', () => {\n        const statements = fragment(bindings).map(generate);\n        assert.equal(statements.length, 3);\n        const code = [\n            statements[0],\n            ...statements[1].split('\\n').map(s => s.trim()),\n            statements[2]\n        ];\n\n        assert.deepEqual(code, [\n            'const __fragment = __nodes[__nodes.length];',\n            '__fragment.unsubscribe = () => {',\n            '__sub0.unsubscribe();',\n            '__sub2.unsubscribe();',\n            '};',\n            'return __fragment;'\n        ]);\n    });\n\n});\n\n","/*eslint no-undef: off, no-unused-vars: off */\n\nimport { generate } from 'astring';\nimport getBinder from './getBinder';\nimport { VALUE, SUBSCRIBE } from '../../src/binders/binding-types';\n\nimport { assert } from 'chai';\nimport codeEqual from '../helpers/code-equal';\nimport parse from '../../src/ast';\n\nimport { templateAFE, TTEtoAFE } from '../../src/transformers/template';\n\ndescribe('transform - template', () => {\n    const binders = [\n        getBinder({ ast: (() => one).toExpr(), type: SUBSCRIBE }, { module: 0, element: 0 }),\n        getBinder({ ast: (() => two).toExpr(), type: VALUE }, { module: 1, element: 0 }),\n        getBinder({ ast: (() => three).toExpr(), type: SUBSCRIBE }, { module: 1, element: 1 }),\n    ];\n\n    it('no bindings', () => {\n        const ast = templateAFE({ binders: [], index: 1 });\n        const code = generate(ast);\n\n        codeEqual(code, expected);\n\n        function expected() {\n            () => {\n                const __nodes = __render1();\n                return __nodes[__nodes.length];\n            } // eslint-disable-line\n        }\n    });\n\n    it('with bindings', () => {\n        const ast = templateAFE({ binders, index: 2 });\n        const code = generate(ast);\n\n        codeEqual(code, expected);\n\n        function expected() {\n            () => {\n                const __nodes = __render2();\n                const __sub0 = one.subscribe(__bind0(__nodes[0]));\n                __bind1(__nodes[0])(two);\n                const __sub2 = three.subscribe(__bind1(__nodes[1]));\n                const __fragment = __nodes[__nodes.length];\n                __fragment.unsubscribe = () => {\n                    __sub0.unsubscribe();\n                    __sub2.unsubscribe();\n                };\n                return __fragment;\n            } // eslint-disable-line\n        }\n    });\n\n    it('TTE to AFE', () => {\n        const AFE = templateAFE({ binders: [], index: 0 });\n        const source = () => {\n            const template = _``;\n        };\n        const ast = source.toAst();\n\n        const TTE = ast.body[0].declarations[0].init;\n        TTEtoAFE(TTE, AFE);\n        \n        const code = generate(ast);\n        codeEqual(code, expected);\n\n        function expected() {\n            const template = (() => {\n                const __nodes = __render0();\n                return __nodes[__nodes.length];\n            })();\n        }\n    });\n\n});"],"names":["generate","ChildBinder","assert","chai","parse","ast","parseTemplate","renderer","simple","base","MODULE_NAME","SPECIFIER_NAME","recursive","TAG","compile","unsubscribes","parseAst","compiler","binders","params","render","bindings","matchObservables","getTaggedTemplates","getBinder"],"mappings":"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"}